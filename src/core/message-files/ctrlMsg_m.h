//
// Generated file, do not edit! Created by nedtool 4.6 from core/message-files/ctrlMsg.msg.
//

#ifndef _CTRLMSG_M_H_
#define _CTRLMSG_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>core/message-files/ctrlMsg.msg:2</tt> by nedtool.
 * <pre>
 * enum CtrlType
 * {
 * 
 *     AppREQUEST = 1;             // Request to send data from application layer
 *     AppCONFIRMATION = 2;        // Confirmation to send data from network/mac layer
 *     SenseFreeCHANNEL = 3;       // MAC Request for any available free channel to Spectrum Sensor
 *     SenseDataCHANNEL = 4;       // MAC Request for sensing the data channel
 *     SenseProposedCHANNEL = 5;   // MAC request for confirming the state of a proposed channel from transmitter.
 *     SenseFreeREPLY = 6;         // Reply from spectrum sensor about free channel request
 *     SenseDataREPLY = 7;         // Reply from spectrum sensor about data channel state
 *     SenseProposedREPLY = 8;
 *     TxSUCCESS = 9;              // MAC Informs APP about successful transmission
 *     TxFAIL = 10;                    // MAC informs APP about failed tx
 *     SensingRESULT = 11;         // Spectrum Sensing publishes Sensing results on SCL
 *     SenseDrmCHANNEL = 12;
 *     SenseDrmREPLY = 13;
 *     SenseChannelMap = 14;
 *     SenseChannelMapReply = 15;
 *     RendezvousSuccess = 16;
 *     RendezvousFail = 17;
 *     AppReqReady = 18;   		// add here, request if can request for send from application layer
 * }
 * </pre>
 */
enum CtrlType {
    AppREQUEST = 1,
    AppCONFIRMATION = 2,
    SenseFreeCHANNEL = 3,
    SenseDataCHANNEL = 4,
    SenseProposedCHANNEL = 5,
    SenseFreeREPLY = 6,
    SenseDataREPLY = 7,
    SenseProposedREPLY = 8,
    TxSUCCESS = 9,
    TxFAIL = 10,
    SensingRESULT = 11,
    SenseDrmCHANNEL = 12,
    SenseDrmREPLY = 13,
    SenseChannelMap = 14,
    SenseChannelMapReply = 15,
    RendezvousSuccess = 16,
    RendezvousFail = 17,
    AppReqReady = 18
};

/**
 * Class generated from <tt>core/message-files/ctrlMsg.msg:24</tt> by nedtool.
 * <pre>
 * message ctrlMsg
 * {
 *     int kind @enum(CtrlType);
 *     int numberOfPackets;
 *     int destination;
 *     int channelID;
 *     bool channelState;      // true means data channel is still free.
 *     int SensingChannel;     // the id of the channel that needs to be sensed
 *     int sensingResult[];        // Results of spectrum sensing for publishing on SCL.
 *     int channelMap[];
 * }
 * </pre>
 */
class ctrlMsg : public ::cMessage
{
  protected:
    int kind_var;
    int numberOfPackets_var;
    int destination_var;
    int channelID_var;
    bool channelState_var;
    int SensingChannel_var;
    int *sensingResult_var; // array ptr
    unsigned int sensingResult_arraysize;
    int *channelMap_var; // array ptr
    unsigned int channelMap_arraysize;

  private:
    void copy(const ctrlMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ctrlMsg&);

  public:
    ctrlMsg(const char *name=NULL, int kind=0);
    ctrlMsg(const ctrlMsg& other);
    virtual ~ctrlMsg();
    ctrlMsg& operator=(const ctrlMsg& other);
    virtual ctrlMsg *dup() const {return new ctrlMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getKind() const;
    virtual void setKind(int kind);
    virtual int getNumberOfPackets() const;
    virtual void setNumberOfPackets(int numberOfPackets);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getChannelID() const;
    virtual void setChannelID(int channelID);
    virtual bool getChannelState() const;
    virtual void setChannelState(bool channelState);
    virtual int getSensingChannel() const;
    virtual void setSensingChannel(int SensingChannel);
    virtual void setSensingResultArraySize(unsigned int size);
    virtual unsigned int getSensingResultArraySize() const;
    virtual int getSensingResult(unsigned int k) const;
    virtual void setSensingResult(unsigned int k, int sensingResult);
    virtual void setChannelMapArraySize(unsigned int size);
    virtual unsigned int getChannelMapArraySize() const;
    virtual int getChannelMap(unsigned int k) const;
    virtual void setChannelMap(unsigned int k, int channelMap);
};

inline void doPacking(cCommBuffer *b, ctrlMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ctrlMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _CTRLMSG_M_H_

