//
// Generated file, do not edit! Created by nedtool 4.6 from core/message-files/dataMsg.msg.
//

#ifndef _DATAMSG_M_H_
#define _DATAMSG_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>core/message-files/dataMsg.msg:3</tt> by nedtool.
 * <pre>
 * enum dataType
 * {
 * 
 *     RTS = 100;
 *     CTS = 101;
 *     ACK = 102;
 *     RTSNACK = 103;
 *     DATA = 104;
 *     DATAACK = 105;
 *     DATANACK = 106;
 *     EOT = 107;
 *     PUSTART = 108;
 *     PUEND = 109;
 *     DRMCH = 110;   // A recommendation message from DRM
 *     MACDATA = 111;
 *     MACACK = 112;
 *     MOBILITY = 113;
 *     PUDATA = 114;    // add here
 * }
 * </pre>
 */
enum dataType {
    RTS = 100,
    CTS = 101,
    ACK = 102,
    RTSNACK = 103,
    DATA = 104,
    DATAACK = 105,
    DATANACK = 106,
    EOT = 107,
    PUSTART = 108,
    PUEND = 109,
    DRMCH = 110,
    MACDATA = 111,
    MACACK = 112,
    MOBILITY = 113,
    PUDATA = 114
};

/**
 * Class generated from <tt>core/message-files/dataMsg.msg:22</tt> by nedtool.
 * <pre>
 * packet dataMsg extends cPacket
 * {
 *     //string displayString = "i=old/ball,red,is=s";
 *     int kind @enum(dataType);
 *     int numberOfPackets;
 *     int proposedChannel;
 *     int source;
 *     int destination;
 * }
 * </pre>
 */
class dataMsg : public ::cPacket
{
  protected:
    int kind_var;
    int numberOfPackets_var;
    int proposedChannel_var;
    int source_var;
    int destination_var;

  private:
    void copy(const dataMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const dataMsg&);

  public:
    dataMsg(const char *name=NULL, int kind=0);
    dataMsg(const dataMsg& other);
    virtual ~dataMsg();
    dataMsg& operator=(const dataMsg& other);
    virtual dataMsg *dup() const {return new dataMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getKind() const;
    virtual void setKind(int kind);
    virtual int getNumberOfPackets() const;
    virtual void setNumberOfPackets(int numberOfPackets);
    virtual int getProposedChannel() const;
    virtual void setProposedChannel(int proposedChannel);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
};

inline void doPacking(cCommBuffer *b, dataMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, dataMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _DATAMSG_M_H_

